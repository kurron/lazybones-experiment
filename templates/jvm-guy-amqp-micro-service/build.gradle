buildscript {
    ext {
        codenarcVersion = '0.21'
        groovyVersion = '2.3.4'
        jacocoVersion = '0.7.1.201405082137'
        spockVersion = '0.7-groovy-2.0'
        springBootVersion = '1.1.4.RELEASE'
        springPlatformVersion = '1.0.1.RELEASE'

        groovyDocApiURL = 'http://beta.groovy-lang.org/docs/latest/html/gapi/'
    }    
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}" 
    }
}

repositories {
    jcenter()
}

apply plugin: 'groovy' 
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'codenarc'
apply plugin: 'jacoco'
apply plugin: 'project-report'
apply plugin: 'build-dashboard'

configurations {
    providedRuntime
}

group = 'org.example' 
version = '0.0.1'

war.manifest.attributes( "Implementation-Title": project.name, "Implementation-Version": project.version )

dependencies {
    versionManagement "io.spring.platform:platform-versions:${springPlatformVersion}@properties"

    compile "org.codehaus.groovy:groovy-all:${groovyVersion}:indy"
    // notice we don't have to supply version numbers, Spring Boot plug-in manages that
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-amqp'
    compile 'org.springframework.boot:spring-boot-starter-integration'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-starter-web'

    providedRuntime "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile( "org.spockframework:spock-core:${spockVersion}" ) { exclude module: 'groovy-all' }
    testCompile( "org.spockframework:spock-spring:${spockVersion}" ) { exclude module: 'groovy-all' }
}

defaultTasks << 'clean'
defaultTasks << 'projectReport'
defaultTasks << 'buildDashboard'
defaultTasks << 'build'

compileGroovy.groovyOptions.optimizationOptions['indy'] = true
compileTestGroovy.groovyOptions.optimizationOptions['indy'] = true

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

compileGroovy.options*.compilerArgs = ['-Xlint:deprecation','-encoding', 'UTF-8']
compileTestGroovy.options*.compilerArgs = ['-Xlint:deprecation','-encoding', 'UTF-8']

codenarc {
    configFile = file( "${projectDir}/src/main/config/codenarc.xml" )
    toolVersion = codenarcVersion
    ignoreFailures = false
    codenarcMain.enabled = true
    codenarcTest.enabled = true
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true
    }
}
// Since the JaCoCo plug in does not honor excludes or break the build if coverage thresholds are crossed, we have to do it by hand.
task verifyCodeCoverage( dependsOn: 'jacocoTestReport' ) {
    description = 'Parses the generated JaCoCo xml report, and determines if sufficient coverage is present.'
    group = 'Build'

    doFirst {
        // remove the DOCTYPE tag from the generated xml, otherwise we have to provide report.dtd ourselves.
        def jacocoReportPath = "${jacoco.reportsDir}/test/jacocoTestReport.xml"
        def xmlStr = new File( jacocoReportPath ).text.replace( '<!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd">', '' )
        def xml = new XmlParser( false, false ).parse( new ByteArrayInputStream( xmlStr.bytes ) )

        def jacocoExclude = coverageExcludes ? coverageExcludes : []
        jacocoExclude.each { logger.quiet "Excluding ${it} from code coverage check." }
        def filtered = xml.package.class.findAll { clazz -> !jacocoExclude.any { clazz.@name.contains( it ) } }
        def instructions = filtered.collect{ it.counter }.flatten().findAll{ it.@type == 'INSTRUCTION' }.flatten()
        def offenders = instructions.findAll { (it.@missed as int) >= (it.@covered as int) }.collect { it.parent().attributes().name }
        if ( offenders ) {
            offenders.each { logger.quiet "Insufficient code coverage: ${it}" }
            throw new IllegalStateException( "Not enough code coverage! Consult ${jacoco.reportsDir}/test/html/index.html for details." )
        }
        else {
            logger.quiet 'Adequate code coverage detected.'
        }
    }
}
check.dependsOn 'verifyCodeCoverage'

ext.sharedManifest = manifest {
    attributes( "Implementation-Title": project.name, "Implementation-Version": project.version )
}

jar {
    manifest = project.manifest {
        from sharedManifest
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest = project.manifest {
        from sharedManifest
    }
}

task testSourcesJar(type: Jar, dependsOn: testClasses) {
    classifier = 'test-sources'
    from sourceSets.test.allSource
    manifest = project.manifest {
        from sharedManifest
    }
}

task testBinariesJar(type: Jar, dependsOn: testClasses) {
    classifier = 'test'
    from sourceSets.test.output
    manifest = project.manifest {
        from sharedManifest
    }
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'groovydoc'
    from project.docsDir.path + '/groovydoc'
    manifest = project.manifest {
        from sharedManifest
    }
}

artifacts {
    archives sourcesJar
    archives testSourcesJar
    archives testBinariesJar
    archives groovydocJar
}

groovydoc {
    docTitle = "docTitle: $project.name $version"
    footer = "footer: $project.name $version"
    header = "header: $project.name $version"
    windowTitle = "windowTitle: $project.name $version"
    includePrivate = false
    overview = 'overview.html'
    use = true
}

// excludes classes from code coverage check, can specify a directory or individual files
ext.coverageExcludes = ['org/example/',
                        'org/example/EmbeddedServletContainerEventListener',
                       ]
