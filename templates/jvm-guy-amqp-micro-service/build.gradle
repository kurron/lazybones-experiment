buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}" 
    }
}

subprojects {

    // -------- all stages -------------------
    group = 'org.example'
    version = new ProjectVersion( major.toInteger(), minor.toInteger(), patch.toInteger(), release.toBoolean() )

    repositories {
        jcenter()
    }

    task printVersion() {
        group = 'Help'
        description = 'Prints project version'
        doLast {
            logger.quiet "Version: ${version}"
        }
    }

    task printStage() {
        group = 'Help'
        description = 'Prints the stage the build would execute with the current property settings'
        doLast {
            logger.quiet "Stage: ${stage}"
        }
    }

    // comment out if you want to have version conflicts detected
    /*
    configurations*.resolutionStrategy {
        failOnVersionConflict()
    }
    */

    apply plugin: 'project-report'
    apply plugin: 'build-dashboard'
    apply plugin: 'build-announcements'

    apply from: "$rootDir/gradle/groovy.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/codenarc.gradle"

    dependencies {
        compile "org.codehaus.groovy:groovy-all:${groovyVersion}:indy"
        testCompile( "org.spockframework:spock-core:${spockVersion}" ) {
            exclude module: 'groovy-all'
            exclude module: 'junit-dep'
        }
        testCompile( "org.spockframework:spock-spring:${spockVersion}" ) {
            exclude module: 'groovy-all'
            exclude module: 'junit-dep'
        }
        testCompile "info.cukes:cucumber-junit:${cucumberVersion}"
        testCompile "info.cukes:cucumber-groovy:${cucumberVersion}"
        testCompile "info.cukes:cucumber-spring:${cucumberVersion}"
    }

    task collectJars(type: Copy) {
        description 'Copy dependencies into build area for use by external tooling, such as a CI machine'
        from configurations.testRuntime.asFileTree
        into "$buildDir/dependencies"
    }
}

allprojects {
    defaultTasks << 'clean'
    defaultTasks << 'projectReport'
    defaultTasks << 'build'
    defaultTasks << 'buildDashboard'
    defaultTasks << 'collectJars'
}




