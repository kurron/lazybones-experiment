package org.example.shared.rest

import org.example.rest.model.ErrorContext
import org.example.rest.model.SimpleMediaType
import org.example.shared.feedback.CustomFeedbackContext
import org.example.shared.feedback.FeedbackAware
import org.example.shared.feedback.FeedbackProvider
import org.springframework.http.HttpHeaders
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.ControllerAdvice
import org.springframework.web.bind.annotation.ExceptionHandler
import org.springframework.web.context.request.WebRequest
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler

/**
 * Will handle all errors generated by controllers ensuring that only our hypermedia type is returned.
 */
@SuppressWarnings('GroovyUnusedDeclaration')
@ControllerAdvice
class GlobalExceptionHandler extends ResponseEntityExceptionHandler implements FeedbackAware {

    /**
     * Manages interactions with the logging stream.
     */
    private FeedbackProvider theProvider

    @Override
    FeedbackProvider getFeedbackProvider() {
        theProvider
    }

    @Override
    void setFeedbackProvider(FeedbackProvider aProvider) {
        theProvider = aProvider
    }

    @ExceptionHandler
    ResponseEntity<SimpleMediaType> handleResourceNotFound( ResourceNotFoundError context ) {
        theProvider.sendFeedback( context.context, context.arguments )
        def error = new ErrorContext( title: context.title, code: context.code, message: context.message )
        def hypermediaControl = new SimpleMediaType( error: error )
        new ResponseEntity<SimpleMediaType>( hypermediaControl, HttpStatus.NOT_FOUND )
    }

    @ExceptionHandler
    ResponseEntity<SimpleMediaType> handleUnexpectedErrors( Exception context ) {
        theProvider.sendFeedback( CustomFeedbackContext.UNEXPECTED_FAILURE, context )
        def error = new ErrorContext( title: 'Unexpected Failure', code: CustomFeedbackContext.UNEXPECTED_FAILURE.code, message: context.message )
        def hypermediaControl = new SimpleMediaType( error: error )
        new ResponseEntity<SimpleMediaType>( hypermediaControl, HttpStatus.INTERNAL_SERVER_ERROR )
    }

    @Override
    protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {
        handleUnexpectedErrors( ex )
    }
}
